// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package api

import (
	"context"
	"github.com/ONSdigital/dp-identity-api/identity"
	"sync"
)

var (
	lockIdentityServiceMockCreate         sync.RWMutex
	lockIdentityServiceMockCreateToken    sync.RWMutex
	lockIdentityServiceMockGet            sync.RWMutex
	lockIdentityServiceMockVerifyPassword sync.RWMutex
)

// IdentityServiceMock is a mock implementation of IdentityService.
//
//     func TestSomethingThatUsesIdentityService(t *testing.T) {
//
//         // make and configure a mocked IdentityService
//         mockedIdentityService := &IdentityServiceMock{
//             CreateFunc: func(ctx context.Context, i *identity.Model) (string, error) {
// 	               panic("TODO: mock out the Create method")
//             },
//             CreateTokenFunc: func(ctx context.Context, email string, password string) error {
// 	               panic("TODO: mock out the CreateToken method")
//             },
//             GetFunc: func(ctx context.Context) (*identity.Model, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             VerifyPasswordFunc: func(ctx context.Context, email string, password string) error {
// 	               panic("TODO: mock out the VerifyPassword method")
//             },
//         }
//
//         // TODO: use mockedIdentityService in code that requires IdentityService
//         //       and then make assertions.
//
//     }
type IdentityServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, i *identity.Model) (string, error)

	// CreateTokenFunc mocks the CreateToken method.
	CreateTokenFunc func(ctx context.Context, email string, password string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context) (*identity.Model, error)

	// VerifyPasswordFunc mocks the VerifyPassword method.
	VerifyPasswordFunc func(ctx context.Context, email string, password string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// I is the i argument value.
			I *identity.Model
		}
		// CreateToken holds details about calls to the CreateToken method.
		CreateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// VerifyPassword holds details about calls to the VerifyPassword method.
		VerifyPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
	}
}

// Create calls CreateFunc.
func (mock *IdentityServiceMock) Create(ctx context.Context, i *identity.Model) (string, error) {
	if mock.CreateFunc == nil {
		panic("moq: IdentityServiceMock.CreateFunc is nil but IdentityService.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		I   *identity.Model
	}{
		Ctx: ctx,
		I:   i,
	}
	lockIdentityServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockIdentityServiceMockCreate.Unlock()
	return mock.CreateFunc(ctx, i)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedIdentityService.CreateCalls())
func (mock *IdentityServiceMock) CreateCalls() []struct {
	Ctx context.Context
	I   *identity.Model
} {
	var calls []struct {
		Ctx context.Context
		I   *identity.Model
	}
	lockIdentityServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockIdentityServiceMockCreate.RUnlock()
	return calls
}

// CreateToken calls CreateTokenFunc.
func (mock *IdentityServiceMock) CreateToken(ctx context.Context, email string, password string) error {
	if mock.CreateTokenFunc == nil {
		panic("moq: IdentityServiceMock.CreateTokenFunc is nil but IdentityService.CreateToken was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
	}
	lockIdentityServiceMockCreateToken.Lock()
	mock.calls.CreateToken = append(mock.calls.CreateToken, callInfo)
	lockIdentityServiceMockCreateToken.Unlock()
	return mock.CreateTokenFunc(ctx, email, password)
}

// CreateTokenCalls gets all the calls that were made to CreateToken.
// Check the length with:
//     len(mockedIdentityService.CreateTokenCalls())
func (mock *IdentityServiceMock) CreateTokenCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
	}
	lockIdentityServiceMockCreateToken.RLock()
	calls = mock.calls.CreateToken
	lockIdentityServiceMockCreateToken.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IdentityServiceMock) Get(ctx context.Context) (*identity.Model, error) {
	if mock.GetFunc == nil {
		panic("moq: IdentityServiceMock.GetFunc is nil but IdentityService.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockIdentityServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockIdentityServiceMockGet.Unlock()
	return mock.GetFunc(ctx)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIdentityService.GetCalls())
func (mock *IdentityServiceMock) GetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockIdentityServiceMockGet.RLock()
	calls = mock.calls.Get
	lockIdentityServiceMockGet.RUnlock()
	return calls
}

// VerifyPassword calls VerifyPasswordFunc.
func (mock *IdentityServiceMock) VerifyPassword(ctx context.Context, email string, password string) error {
	if mock.VerifyPasswordFunc == nil {
		panic("moq: IdentityServiceMock.VerifyPasswordFunc is nil but IdentityService.VerifyPassword was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
	}
	lockIdentityServiceMockVerifyPassword.Lock()
	mock.calls.VerifyPassword = append(mock.calls.VerifyPassword, callInfo)
	lockIdentityServiceMockVerifyPassword.Unlock()
	return mock.VerifyPasswordFunc(ctx, email, password)
}

// VerifyPasswordCalls gets all the calls that were made to VerifyPassword.
// Check the length with:
//     len(mockedIdentityService.VerifyPasswordCalls())
func (mock *IdentityServiceMock) VerifyPasswordCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
	}
	lockIdentityServiceMockVerifyPassword.RLock()
	calls = mock.calls.VerifyPassword
	lockIdentityServiceMockVerifyPassword.RUnlock()
	return calls
}
