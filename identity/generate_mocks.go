// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package identity

import (
	"sync"
)

var (
	lockPersistenceMockCreate sync.RWMutex
)

// PersistenceMock is a mock implementation of Persistence.
//
//     func TestSomethingThatUsesPersistence(t *testing.T) {
//
//         // make and configure a mocked Persistence
//         mockedPersistence := &PersistenceMock{
//             CreateFunc: func(identity *Model) error {
// 	               panic("TODO: mock out the Create method")
//             },
//         }
//
//         // TODO: use mockedPersistence in code that requires Persistence
//         //       and then make assertions.
//
//     }
type PersistenceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(identity *Model) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Identity is the identity argument value.
			Identity *Model
		}
	}
}

// Create calls CreateFunc.
func (mock *PersistenceMock) Create(identity *Model) error {
	if mock.CreateFunc == nil {
		panic("moq: PersistenceMock.CreateFunc is nil but Persistence.Create was just called")
	}
	callInfo := struct {
		Identity *Model
	}{
		Identity: identity,
	}
	lockPersistenceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockPersistenceMockCreate.Unlock()
	return mock.CreateFunc(identity)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedPersistence.CreateCalls())
func (mock *PersistenceMock) CreateCalls() []struct {
	Identity *Model
} {
	var calls []struct {
		Identity *Model
	}
	lockPersistenceMockCreate.RLock()
	calls = mock.calls.Create
	lockPersistenceMockCreate.RUnlock()
	return calls
}
